# Join datasets (Merge)
res <- left_join(pols, snp, by = month)
# Tidy 'snp.csv'
snp <-
# load data
read_csv("./datasets/HW2/fivethirtyeight_datasets/snp.csv") |>
# clean column name
janitor::clean_names() |>
# separate date into 'year', 'month', 'day'
separate(date, c("year", "month","day"), convert = TRUE, sep = '/') |>
# change month number to month name
mutate(month = month(month, label = TRUE)) |>
# remove some columns
select(-day)
snp
# Join datasets (Merge)
res <- left_join(pols, snp, by = join.by(month = month))
?left_join
# Join datasets (Merge)
res <- left_join(pols, snp, by = join_by(month = month))
# Join datasets (Merge)
res <- left_join(pols, snp, by = join_by(month == month))
res
# Join datasets (Merge)
res <- left_join(pols, snp, by = join_by(month == month, year == year))
res
# Join datasets (Merge)
res <- left_join(pols, snp, by = join_by(month == month, year == year))
res <- left_join(res, unemploy, by = join_by(month == month, year == year))
# Join datasets (Merge)
res <- left_join(pols, snp, by = join_by(month == month, year == year))
res <- left_join(res, unemploy, by = join_by(month == month, year == year))
res
filter(res, is.na(close))
filter(res, !is.na(close))
pull(pols, year)
pull(snp, year)
pull(unemploy, year)
snp <-
# load data
read_csv("./datasets/HW2/fivethirtyeight_datasets/snp.csv") |>
# clean column name
janitor::clean_names() |>
# separate date into 'year', 'month', 'day'
separate(date, c("year", "month","day"), convert = TRUE, sep = '/')
snp
?separate
snp <-
# load data
read_csv("./datasets/HW2/fivethirtyeight_datasets/snp.csv") |>
# clean column name
janitor::clean_names()
separate(snp, date)
separate(snp, date, c("y", "m", "d"))
separate(snp, date, c("m", "d"))
separate(snp, date, c("m", "d"), sep = "//")
ssnp
snp
# Tidy 'snp.csv'
snp <-
# load data
read_csv("./datasets/HW2/fivethirtyeight_datasets/snp.csv") |>
# clean column name
janitor::clean_names() |>
# separate date into 'year', 'month', 'day'
separate(date, c("year", "month","day"), convert = TRUE, sep = '/') |>
# change month number to month name
mutate(month = month(month, label = TRUE)) |>
# remove some columns
select(-day)
snp
# Join datasets (Merge)
res <- left_join(pols, snp, by = join_by(month == month, year == year))
res <- left_join(res, unemploy, by = join_by(month == month, year == year))
res
filter(res, is.na(close))
filter(res, !is.na(close))
?read_exce
?read_excel
trash <-
# load data
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
janitor::clean_names()  # clean column name
trash
trash <-
# load data
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx") |>
janitor::clean_names()  # clean column name
trash
trash <-
# load data
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
janitor::clean_names()  # clean column name
trash
trash
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster))
trash
trash
columns(trash)
colnames(trash)
pull(trash, x15)
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
select(where(~sum(!is.na(.)) > 0))
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = )
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
select(where(~sum(!is.na(.)) > 0)) |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = )
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty_cols() |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = )
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty() |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = )
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = )
library(janitor)
?remove_empty
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols")
trash
colnames(trash)
trash <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate 'houses_powered' variable
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = 500 * weight_tons + 30)
trash
# Tidy "Professor Trash Wheel" sheet in "Trash Wheel Collection Data.xlsx"
trash2 <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 2, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate 'houses_powered' variable
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = 500 * weight_tons + 30)
trash2
# Tidy "Gwynnda Trash Wheel" sheet in "Trash Wheel Collection Data.xlsx"
trash3 <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 3, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate 'houses_powered' variable
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = 500 * weight_tons + 30)
trash3
# Tidy "Mr.Trash Wheel" sheet in "Trash Wheel Collection Data.xlsx"
trash1 <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate 'houses_powered' variable
# Homes Powered - Each ton of trash equates to on average 500 kilowatts of electricity.  An average household will use 30 kilowatts per day.
mutate(homes_powered = 500 * weight_tons + 30)
trash1
# Tidy "Mr.Trash Wheel" sheet in "Trash Wheel Collection Data.xlsx"
trash1 <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 1, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate 'houses_powered' variable, houses_powered = 500 * weight_tons + 30
mutate(homes_powered = 500 * weight_tons + 30)
trash1
# Tidy "Professor Trash Wheel" sheet in "Trash Wheel Collection Data.xlsx"
trash2 <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 2, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate 'houses_powered' variable, houses_powered = 500 * weight_tons + 30
mutate(homes_powered = 500 * weight_tons + 30)
trash2
# Tidy "Gwynnda Trash Wheel" sheet in "Trash Wheel Collection Data.xlsx"
trash3 <-
# load data, specify sheet + omit row with figure
readxl::read_excel("./datasets/HW2/Trash Wheel Collection Data.xlsx", sheet = 3, skip = 1) |>
# clean column name
janitor::clean_names() |>
# omit columns with notes
janitor::remove_empty(which = "cols") |>
# omit rows that do not include dumpster-specific data
filter(!is.na(dumpster)) |>
# calculate 'houses_powered' variable, houses_powered = 500 * weight_tons + 30
mutate(homes_powered = 500 * weight_tons + 30)
trash3
# Combine datasets into single dataset
total_trash <- bind_rows(trash1, trash2, trash3)
total_trash
colnames(trash1)
colnames(trash2)
colnames(trash3)
# Combine datasets into single dataset
# add data source annotation
trash1 <- mutate(source = "Mr. Trash Wheel")
# Combine datasets into single dataset
# add data source annotation
trash1 <- mutate(trash1, source = rep("Mr. Trash Wheel"))
trash2 <- mutate(trash2, source = "Professor Trash Wheel")
trash3 <- mutate(trash3, source = "Gwynnda Trash Wheel")
total_trash <- bind_rows(trash1, trash2, trash3)
total_trash
trash1
colnames(trash1)
trash1["source"]
?bind_rows
# Combine datasets into single dataset
# add data source annotation
trash1 <- mutate(trash1, source = "Mr. Trash Wheel")
trash2 <- mutate(trash2, source = "Professor Trash Wheel")
trash3 <- mutate(trash3, source = "Gwynnda Trash Wheel")
total_trash <- bind_rows(trash1, trash2, trash3, id = c("Mr. Trash Wheel", "Mr. Trash Wheel", "Mr. Trash Wheel"))
# Combine datasets into single dataset
# add data source annotation
trash1 <- mutate(trash1, source = "Mr. Trash Wheel")
trash2 <- mutate(trash2, source = "Professor Trash Wheel")
trash3 <- mutate(trash3, source = "Gwynnda Trash Wheel")
total_trash <- bind_rows("Mr. Trash Wheel" = trash1, "Professor Trash Wheel" = trash2, "Gwynnda Trash Wheel" = trash3, id = "source")
bind_cols(tibble(x = 1:3), tibble(y = 1:2))
bind_cols(tibble(x = 1:3), tibble(y = 1:4))
total_trash <- bind_rows("Mr. Trash Wheel" = trash1, "Professor Trash Wheel" = trash2, id = "source")
bind_cols(tibble(x = 1:3), tibble(y = 1:2))
bind_rows(tibble(x = 1:3), tibble(y = 1:2))
bind_rows(trash1[1:2], trash2[1:2])
bind_rows(trash1[1:2, ], trash2[1:2, ])
amyloid <-
# load data
read_csv("./datasets/HW2/data_mci/mci_amyloid.csv", skip = 1) |>
# clean column name
janitor::clean_names()
baseline <-
# load data
read_csv("./datasets/HW2/data_mci/MCI_baseline.csv", skip = 1) |>
# clean column name
janitor::clean_names()
baseline <-
# load data
read_csv("./datasets/HW2/data_mci/MCI_baseline.csv", skip = 1) |>
# clean column name
janitor::clean_names()
baseline
baseline <-
# load data
read_csv("./datasets/HW2/data_mci/MCI_baseline.csv", skip = 1) |>
# clean column name
janitor::clean_names() |>
# 'sex' and 'apoe4' variable as string
mutate(sex = case_match(
sex,
0 ~ "Female",
1 ~ "Male"
))
baseline
baseline <-
# load data
read_csv("./datasets/HW2/data_mci/MCI_baseline.csv", skip = 1) |>
# clean column name
janitor::clean_names() |>
# 'sex' and 'apoe4' variable as string
mutate(sex = case_match(sex,
0 ~ "Female",
1 ~ "Male"),
apoe4 = case_match(apoe4,
0 ~ "non-carrior",
1 ~ "carrior"))
# count of participant
dim(baseline)[0]
# count of participant
dim(baseline)
# count of participant
dim(baseline)[1]
# average age
mean(pull(baseline, age))
colnames(baseline)
# average age
mean(pull(baseline, current_age))
# Women APOE4 carriers proportion
filter(baseline, sex == "Female")
# Women APOE4 carriers proportion
dim(filter(baseline, sex == "Female", apoe4 == "carrier"))[1] / dim(filter(baseline, sex == "Female"))[1]
# Women APOE4 carriers proportion
dim(filter(baseline, sex == "Female"))[1] / dim(filter(baseline, sex == "Female"))[1]
?filter
# Women APOE4 carriers proportion
dim(filter(baseline, sex == "Female" & apoe4 == "carrier"))[1] / dim(filter(baseline, sex == "Female"))[1]
filter(baseline, sex == "Female" & apoe4 == "carrier")
filter(baseline, apoe4 == "carrier")
baseline <-
# load data
read_csv("./datasets/HW2/data_mci/MCI_baseline.csv", skip = 1) |>
# clean column name
janitor::clean_names() |>
# 'sex' and 'apoe4' variable as string
mutate(sex = case_match(sex,
0 ~ "Female",
1 ~ "Male"),
apoe4 = case_match(apoe4,
0 ~ "non-carrier",
1 ~ "carrier"))
baseline["apoe4"]
filter(baseli)
filter(baseline, apoe4 == "carrier")
filter(baseline, apoe4 == "carrier" & sex == "Female")
# Women APOE4 carriers proportion
dim(filter(baseline, apoe4 == "carrier" & sex == "Female"))[1] / dim(filter(baseline, sex == "Female"))[1]
filter(baseline, apoe4 == "carrier" & sex == "Female")
baseline
# Remove participants with no MCI
mci_baseline <- filter(baseline, age_at_onset != ".")
mci_baseline
# count of participant developed MCI
dim(mci_baseline)[1]
amyloid <-
# load data
read_csv("./datasets/HW2/data_mci/mci_amyloid.csv", skip = 1) |>
# clean column name
janitor::clean_names()
intersect(pull(baseline, id), pull(amyloid))
intersect(pull(baseline, id), pull(amyloid, id))
pull(amyloid, id)
amyloid
intersect(pull(baseline, id), pull(amyloid, study_id))
dim(baseline)[1] == length(both_id)
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
dim(baseline)[1] == length(both_id)
intersect(pull(baseline, id), pull(amyloid, study_id))
dim(baseline)[1]
length(both_id)
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
only_baseline <- select(baseline, id %in% both_id)
type(both_id)
type(both_id)
class(both_id)
both_id[1]
both_id[333]
?select
?filter
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
only_baseline <- filter(baseline, id %in% both_id)
only_baseline
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
only_baseline <- filter(baseline, ~id %in% both_id)
only_baseline
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
only_baseline <- c()
for(id in pull(baseline, id)){
if (!id %in% both_id)
append(only_baseline, id)
}
only_baseline
100 %in% both_id\
100 %in% both_id
10000 %in% both_id
!10000 %in% both_id
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
only_baseline <- c()
for(id in pull(baseline, id)){
if (!id %in% both_id)
only_baseline <- append(only_baseline, id)
}
only_baseline
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
# baseline
only_baseline <- c()
for(id in pull(baseline, id)){
if (!id %in% both_id)
only_baseline <- append(only_baseline, id)
}
# amyloid
only_amyloid <- c()
for(id in pull(amyloid, study_id)){
if (!id %in% both_id)
only_amyloid <- append(only_amyloid, id)
}
print(paste("Participant only in baseline", only_baseline))
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
# baseline
only_baseline <- c()
for(id in pull(baseline, id)){
if (!id %in% both_id)
only_baseline <- append(only_baseline, id)
}
# amyloid
only_amyloid <- c()
for(id in pull(amyloid, study_id)){
if (!id %in% both_id)
only_amyloid <- append(only_amyloid, id)
}
only_baseline
only_amyloid
# Check whether some participants appear in only the baseline or amyloid datasets
both_id <- intersect(pull(baseline, id), pull(amyloid, study_id))
# baseline
only_baseline <- c()
for(id in pull(baseline, id)){
if (!id %in% both_id)
only_baseline <- append(only_baseline, id)
}
# amyloid
only_amyloid <- c()
for(id in pull(amyloid, study_id)){
if (!id %in% both_id)
only_amyloid <- append(only_amyloid, id)
}
print("Participant only in baseline")
only_baseline
print("Participant only in amyloid")
only_amyloid
?inner_join
# Combine datasets
participants <- inner_join(baseline, amyloid, by = join_by(id == study_id))
# Combine datasets
participants <- inner_join(baseline, amyloid, by = join_by(id == study_id))
participants
length(both_id)
dim(participants)
# Write combined data as csv file
write_csv(participants, "./output/hw2_prob3_output.csv")
